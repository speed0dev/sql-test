import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class DBConnection {

	private Connection con;
	private ResultSet rs;
	private PreparedStatement pstmt;

	public DBConnection() {
		try {
			//url 수정했습니다.
			String url = "jdbc:mysql://localhost/coffee?characterEncoding=UTF-8&serverTimezone=UTC";
			String user = "root";
			String passwd = "1234";

			con = DriverManager.getConnection(url, user, passwd);
			System.out.println("DB연결 성공");
			
			pstmt = con.prepareStatement("select * from Example");
			rs = pstmt.executeQuery();
			
			while (rs.next()) {
				System.out.println(rs.getInt(1) + "\t" + rs.getString(2));
			}
			
			rs.close();
			pstmt.close();
			con.close();

		} catch (SQLException e) {
			System.out.println("DB연결 실패하거나, SQL문이 틀렸습니다.");
			System.out.print("사유 : " + e.getMessage());
		}
	}

	public static void main(String[] args) {
		new DBConnection();
	}

}



 private SqlFileResult readSqlLines(File f) throws Exception{
        BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(f), "UTF-8"));
        String line = "";
        try {
            String queryLine = "";
            String paramLine = "";
            while ((line = br.readLine()) != null) {
                //System.out.println(line);
                if(line.contains("Preparing:")){
                    String[] tmp = line.split("Preparing:");
                    queryLine = tmp[1];
                }else if(line.contains("Parameters:")){
                    String[] tmp = line.split("Parameters:");
                    paramLine = tmp[1];
                }
            }
            SqlFileResult result = new SqlFileResult(queryLine, paramLine);
            return result;
        }finally {
            if(br!=null) {
                br.close();
            }
        }



		public void setParam(PreparedStatement ps) throws SQLException {
        //
        ValueItem item = null;
        for(int i=0;i<paramList.size();i++){
            item = paramList.get(i);
            if("string".equals(item.getType())){
                ps.setString(i, (String)item.getValue());
            }else if("int".equals(item.getType())){
                ps.setInt(i, (int)item.getValue());
            }else if("long".equals(item.getType())){
                ps.setLong(i, (long)item.getValue());
            }else if("double".equals(item.getType())){
                ps.setDouble(i, (double)item.getValue());
            }else if("float".equals(item.getType())){
                ps.setFloat(i, (float)item.getValue());
            }else if("time".equals(item.getType())){
                ps.setTime(i, (Time)item.getValue());
            }
        }
    }

    public List<String> callHeader(ResultSetMetaData md) throws SQLException {
        List<String> calNameList = new ArrayList<>();
        if(md!=null) {

            for (int i = 1; i <= md.getColumnCount(); i++) {
                metaList.add(new MetaItem(i, md.getColumnName(i), md.getColumnTypeName(i)));
                calNameList.add(md.getColumnName(i));
            }
        }
        return calNameList;
    }
    
